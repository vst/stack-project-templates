{-# START_FILE app/Main.hs #-}
module Main where

import           Data.Version        (showVersion)
import           Lib                 (greeting)
import qualified Options.Applicative as OA
import           Paths_{{name-as-varid}}     (version)
import           System.Exit         (ExitCode, exitSuccess, exitWith)


-- | Main program entry point.
main :: IO ()
main = exitWith =<< (cliProgram =<< OA.execParser cliProgramParserInfo)


-- | CLI program.
cliProgram :: CliArguments -> IO ExitCode
cliProgram (CliArguments (CommandCmd1 w))      = greeting "Hello" w >> exitSuccess
cliProgram (CliArguments (CommandCmd2 (g, w))) = greeting g w >> exitSuccess


-- | Registry of commands and their arguments.
data Command =
    CommandCmd1 String
  | CommandCmd2 (String, String)
  deriving Show


-- | CLI arguments parser.
parserProgramOptions :: OA.Parser CliArguments
parserProgramOptions = CliArguments <$> OA.hsubparser
  (  OA.command "cmd1" (OA.info (CommandCmd1 <$> optsCmd1) (OA.progDesc "Say hello to someone"))
  <> OA.command "cmd2" (OA.info (CommandCmd2 <$> optsCmd2) (OA.progDesc "Send greetings to someone"))
  )


-- | @cmd1@ command arguments parser.
optsCmd1 :: OA.Parser String
optsCmd1 = OA.strOption (OA.long "who" <> OA.short 'w' <> OA.metavar "WHO" <> OA.help "Whom to greet")


-- | @cmd1@ command arguments parser.
optsCmd2 :: OA.Parser (String, String)
optsCmd2 = (,)
  <$> OA.strOption (OA.long "greeting" <> OA.short 'g' <> OA.metavar "GREETING" <> OA.help "Greeting")
  <*> OA.strOption (OA.long "who" <> OA.short 'w' <> OA.metavar "WHO" <> OA.help "Whom to greet")


-- | Parsed command line arguments.
newtype CliArguments = CliArguments { cliArgumentsCommand :: Command } deriving Show


-- | CLI program information.
cliProgramParserInfo :: OA.ParserInfo CliArguments
cliProgramParserInfo = OA.info
  (OA.helper <*> parserVersionOption <*> parserProgramOptions)
  (OA.fullDesc <> OA.progDesc "{{name}}" <> OA.header "{{name}} - CHANGE ME")


-- | Version option.
parserVersionOption :: OA.Parser (a -> a)
parserVersionOption = OA.infoOption (showVersion version) (OA.long "version" <> OA.help "Show version")

{-# START_FILE CHANGELOG.md #-}
# CHANGELOG

{-# START_FILE doctest.hs #-}
import Test.DocTest


main :: IO ()
main = doctest ["-XOverloadedStrings", "-isrc", "src"]

{-# START_FILE .editorconfig #-}
[*]

indent_style = space
indent_size = 2
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

{-# START_FILE .gitignore #-}
.cabal-sandbox/
.ghc.environment.*
.hpc
.hsenv
.HTF/
.stack-work/
*.aux
*.chi
*.chs.h
*.dyn_hi
*.dyn_o
*.eventlog
*.hi
*.hie
*.hp
*.o
*.prof
cabal-dev
cabal.project.local
cabal.project.local~
cabal.sandbox.config
dist
dist-*

{-# START_FILE LICENSE #-}
MIT License

Copyright (c) {{year}}{{^year}}2019{{/year}} {{author-name}}{{^author-name}}CHANGE ME: Author name here{{/author-name}}

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

{-# START_FILE package.yaml #-}
name:               {{name}}
version:            0.0.0.0
github:             "{{github-username}}{{^github-username}}CHANGE ME: githubuser{{/github-username}}/{{name}}"
license:            MIT
author:             "{{author-name}}{{^author-name}}CHANGE ME: Author name here{{/author-name}}"
maintainer:         "{{author-email}}{{^author-email}}CHANGE ME: example@example.com{{/author-email}}"
copyright:          "{{copyright}}{{^copyright}}{{year}}{{^year}}2021{{/year}} {{author-name}}{{^author-name}}CHANGE ME: Author name here{{/author-name}}{{/copyright}}"

description:        Please see the README on GitHub at <https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme>

extra-source-files:
- README.md
- CHANGELOG.md

flags:
  static:
    description:    Use static linking for the main executable
    default:        false
    manual:         true

dependencies:
- base >= 4.11 && < 5

library:
  source-dirs:      src
  ghc-options:
  - -Wall
  default-extensions:
  - OverloadedStrings

executable:
  main:             Main.hs
  source-dirs:      app
  ghc-options:
  - -threaded
  - -rtsopts
  - -with-rtsopts=-N
  dependencies:
  - {{name}}
  - optparse-applicative
  when:
  - condition:      "flag(static) && !(os(osx))"
    ld-options:
    - -static
    - -pthread

tests:
  {{name}}-doctest:
    main:           doctest.hs
    source-dirs:    .
    ghc-options:
    - -threaded
    dependencies:
    - {{name}}
    - doctest

{-# START_FILE README.md #-}
# {{name}}

> **TODO:** Provide a complete README.

{-# START_FILE src/Lib.hs #-}
module Lib where


-- | Outputs a greeting.
greeting :: String -> String -> IO ()
greeting g w = putStrLn $ compileMessage g w


-- | Compiles a message.
--
-- >>> compileMessage "" ""
-- " !"
-- >>> compileMessage "Hello" "World"
-- "Hello World!"
compileMessage :: String -> String -> String
compileMessage g w = g <> " " <> w <> "!"

{-# START_FILE .stylish-haskell.yaml #-}
# stylish-haskell configuration file
# ==================================

# The stylish-haskell tool is mainly configured by specifying steps. These steps
# are a list, so they have an order, and one specific step may appear more than
# once (if needed). Each file is processed by these steps in the given order.
steps:
  # Convert some ASCII sequences to their Unicode equivalents. This is disabled
  # by default.
  # - unicode_syntax:
  #     # In order to make this work, we also need to insert the UnicodeSyntax
  #     # language pragma. If this flag is set to true, we insert it when it's
  #     # not already present. You may want to disable it if you configure
  #     # language extensions using some other method than pragmas. Default:
  #     # true.
  #     add_language_pragma: true

  # Format record definitions
  # - records:
  #     equals: "same_line"
  #     first_field: "indent 2"
  #     field_comment: 2
  #     deriving: 2

  # Align the right hand side of some elements.  This is quite conservative
  # and only applies to statements where each element occupies a single
  # line. All default to true.
  - simple_align:
      cases: true
      top_level_patterns: true
      records: true

  # Import cleanup
  - imports:
      # There are different ways we can align names and lists.
      #
      # - global: Align the import names and import list throughout the entire
      #   file.
      #
      # - file: Like global, but don't add padding when there are no qualified
      #   imports in the file.
      #
      # - group: Only align the imports per group (a group is formed by adjacent
      #   import lines).
      #
      # - none: Do not perform any alignment.
      #
      # Default: global.
      align: file

      # The following options affect only import list alignment.
      #
      # List align has following options:
      #
      # - after_alias: Import list is aligned with end of import including
      #   'as' and 'hiding' keywords.
      #
      #   > import qualified Data.List      as List (concat, foldl, foldr, head,
      #   >                                          init, last, length)
      #
      # - with_alias: Import list is aligned with start of alias or hiding.
      #
      #   > import qualified Data.List      as List (concat, foldl, foldr, head,
      #   >                                 init, last, length)
      #
      # - with_module_name: Import list is aligned `list_padding` spaces after
      #   the module name.
      #
      #   > import qualified Data.List      as List (concat, foldl, foldr, head,
      #                          init, last, length)
      #
      #   This is mainly intended for use with `pad_module_names: false`.
      #
      #   > import qualified Data.List as List (concat, foldl, foldr, head,
      #                          init, last, length, scanl, scanr, take, drop,
      #                          sort, nub)
      #
      # - new_line: Import list starts always on new line.
      #
      #   > import qualified Data.List      as List
      #   >     (concat, foldl, foldr, head, init, last, length)
      #
      # Default: after_alias
      list_align: after_alias

      # Right-pad the module names to align imports in a group:
      #
      # - true: a little more readable
      #
      #   > import qualified Data.List       as List (concat, foldl, foldr,
      #   >                                           init, last, length)
      #   > import qualified Data.List.Extra as List (concat, foldl, foldr,
      #   >                                           init, last, length)
      #
      # - false: diff-safe
      #
      #   > import qualified Data.List as List (concat, foldl, foldr, init,
      #   >                                     last, length)
      #   > import qualified Data.List.Extra as List (concat, foldl, foldr,
      #   >                                           init, last, length)
      #
      # Default: true
      pad_module_names: true

      # Long list align style takes effect when import is too long. This is
      # determined by 'columns' setting.
      #
      # - inline: This option will put as much specs on same line as possible.
      #
      # - new_line: Import list will start on new line.
      #
      # - new_line_multiline: Import list will start on new line when it's
      #   short enough to fit to single line. Otherwise it'll be multiline.
      #
      # - multiline: One line per import list entry.
      #   Type with constructor list acts like single import.
      #
      #   > import qualified Data.Map as M
      #   >     ( empty
      #   >     , singleton
      #   >     , ...
      #   >     , delete
      #   >     )
      #
      # Default: inline
      long_list_align: multiline

      # Align empty list (importing instances)
      #
      # Empty list align has following options
      #
      # - inherit: inherit list_align setting
      #
      # - right_after: () is right after the module name:
      #
      #   > import Vector.Instances ()
      #
      # Default: inherit
      empty_list_align: inherit

      # List padding determines indentation of import list on lines after import.
      # This option affects 'long_list_align'.
      #
      # - <integer>: constant value
      #
      # - module_name: align under start of module name.
      #   Useful for 'file' and 'group' align settings.
      #
      # Default: 4
      list_padding: module_name

      # Separate lists option affects formatting of import list for type
      # or class. The only difference is single space between type and list
      # of constructors, selectors and class functions.
      #
      # - true: There is single space between Foldable type and list of it's
      #   functions.
      #
      #   > import Data.Foldable (Foldable (fold, foldl, foldMap))
      #
      # - false: There is no space between Foldable type and list of it's
      #   functions.
      #
      #   > import Data.Foldable (Foldable(fold, foldl, foldMap))
      #
      # Default: true
      separate_lists: false

      # Space surround option affects formatting of import lists on a single
      # line. The only difference is single space after the initial
      # parenthesis and a single space before the terminal parenthesis.
      #
      # - true: There is single space associated with the enclosing
      #   parenthesis.
      #
      #   > import Data.Foo ( foo )
      #
      # - false: There is no space associated with the enclosing parenthesis
      #
      #   > import Data.Foo (foo)
      #
      # Default: false
      space_surround: false

  # Language pragmas
  - language_pragmas:
      # We can generate different styles of language pragma lists.
      #
      # - vertical: Vertical-spaced language pragmas, one per line.
      #
      # - compact: A more compact style.
      #
      # - compact_line: Similar to compact, but wrap each line with
      #   `{-#LANGUAGE #-}'.
      #
      # Default: vertical.
      style: vertical

      # Align affects alignment of closing pragma brackets.
      #
      # - true: Brackets are aligned in same column.
      #
      # - false: Brackets are not aligned together. There is only one space
      #   between actual import and closing bracket.
      #
      # Default: true
      align: true

      # stylish-haskell can detect redundancy of some language pragmas. If this
      # is set to true, it will remove those redundant pragmas. Default: true.
      remove_redundant: true

      # Language prefix to be used for pragma declaration, this allows you to
      # use other options non case-sensitive like "language" or "Language".
      # If a non correct String is provided, it will default to: LANGUAGE.
      language_prefix: LANGUAGE

  # Replace tabs by spaces. This is disabled by default.
  # - tabs:
  #     # Number of spaces to use for each tab. Default: 8, as specified by the
  #     # Haskell report.
  #     spaces: 8

  # Remove trailing whitespace
  - trailing_whitespace: {}

  # Squash multiple spaces between the left and right hand sides of some
  # elements into single spaces. Basically, this undoes the effect of
  # simple_align but is a bit less conservative.
  # - squash: {}

# A common indentation setting. Different steps take this into account.
indent: 2

# A common setting is the number of columns (parts of) code will be wrapped
# to. Different steps take this into account.
#
# Set this to null to disable all line wrapping.
#
# Default: 80.
columns: 120

# By default, line endings are converted according to the OS. You can override
# preferred format here.
#
# - native: Native newline format. CRLF on Windows, LF on other OSes.
#
# - lf: Convert to LF ("\n").
#
# - crlf: Convert to CRLF ("\r\n").
#
# Default: native.
newline: native

# Sometimes, language extensions are specified in a cabal file or from the
# command line instead of using language pragmas in the file. stylish-haskell
# needs to be aware of these, so it can parse the file correctly.
#
# No language extensions are enabled by default.
# language_extensions:
  # - TemplateHaskell
  # - QuasiQuotes

# Attempt to find the cabal file in ancestors of the current directory, and
# parse options (currently only language extensions) from that.
#
# Default: true
cabal: true

